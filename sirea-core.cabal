Name: sirea-core
Version: 0.1
Synopsis: Simply Reactive! Declarative orchestration in Haskell with RDP.
Category: Sirea, Reactivity
Description:
  Reactive Demand Programming is an effectful, declarative, reactive
  model for orchestration of open systems. Sirea implements RDP in
  Haskell. This particular module is the `core` of Sirea, just the 
  basic behaviors and implementation. Other packages will support
  specific domains or problems (UI, state, video, sound, etc.).

  RDP is similar to arrowized FRP, excepting how it manages effects
  and state. RDP behaviors can encapsulate access to resources and
  services, observing and influencing them through signals. State is
  modeled as an external service. (By comparison, FRP models state 
  as an internal resource with event accumulators or integrals, but
  is purely functional. FRP does not encapsulate access to shared 
  state or resources.) 
  
  RDP is effectful, but not imperative. The constraints on effects
  ensure RDP achieves many reasoning, refactoring, and abstraction 
  benefits of pure functional code. In particular, constraints for
  declarative expression are provided: commutative, idempotent, and
  associative expression; simple logical composition of effects as
  sets of concurrent demands. 
  
  Arrowized composition of behaviors protects RDP properties. Sirea
  developers, however, must be disciplined when adding new effects
  modules: many hooks between RDP and Haskell IO are not RDP safe.

  For more information, see the github Readme and linked pages.

Author: David Barbour
Maintainer: dmbarbour@gmail.com
Homepage: http://github.com/dmbarbour/Sirea

Package-Url: 
Copyright: (c) 2013 by David Barbour
License: BSD3
license-file: LICENSE.txt
Stability: experimental
build-type: Simple
cabal-version: >= 1.8

Source-repository head
  type: git
  location: http://github.com/dmbarbour/Sirea.git

Library
  hs-Source-Dirs: src
  Build-Depends: base (>= 4.5 && < 5)
    ,parallel (>= 3.0 && < 4)
    ,time (>= 1.4 && < 2)
    ,containers (>= 0.5 && < 2)

  Exposed-Modules:
    -- getting started
    Sirea.Prelude
    Sirea.Activate

    -- concepts
    Sirea.Behavior
    Sirea.Signal 
    Sirea.Time
    Sirea.BDeep
    Sirea.Partition
    Sirea.PCX
    Sirea.B 

    -- user support
    Sirea.Utility
    Sirea.UnsafeLink
    Sirea.UnsafeIO
    Sirea.DemandMonitor
    Sirea.AgentResource
    Sirea.Clock
    Sirea.TimeStamp
    Sirea.TimeTrigger
    Sirea.SRef

    -- transforms
    Sirea.Trans.Pure
    Sirea.Trans.Static
    Sirea.Trans.Error
    Sirea.Trans.Reader

    -- implementation details
    Sirea.Internal.CC
    Sirea.Internal.B0Type
    Sirea.Internal.B0Impl
    Sirea.Internal.B0Compile
    Sirea.Internal.B0Dynamic
    Sirea.Internal.B0
    Sirea.Internal.STypes
    Sirea.Internal.DemandMonitorData
    Sirea.Internal.Choke
    Sirea.Internal.SigType
    Sirea.Internal.LTypes
    Sirea.Internal.PTypes
    Sirea.Internal.BCross
    Sirea.Internal.Thread
    Sirea.Internal.PulseSensor
    Sirea.Internal.Tuning

  ghc-options: -Wall -fno-warn-orphans -auto-all

test-suite sirea-test 
  type:                exitcode-stdio-1.0
  hs-source-dirs:      tst
  main-is:             Spec.hs
  build-depends:
      base
    , sirea-core -any
    , HUnit -any
    , QuickCheck -any
  default-language:    Haskell2010
  ghc-options:         -threaded -rtsopts -with-rtsopts=-N
